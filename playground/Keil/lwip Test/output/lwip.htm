<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\lwip.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\lwip.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Thu Apr 05 09:48:39 2012
<BR><P>
<H3>Maximum Stack Usage =       2440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; mainSSLTest &rArr; exchangeAppData &rArr; matrixSslProcessedData &rArr; matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6f]">performHandshake</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">performHandshake</a><BR>
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC1_2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4a]">ADC3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[26]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[27]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[28]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[29]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[53]">DMA2_Channel1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[54]">DMA2_Channel2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[55]">DMA2_Channel3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[56]">DMA2_Channel4_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">SystemInit</a> from main.o(.text) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[1d]">TAMPER_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[51]">TIM6_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[59]">clnCertChecker</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[58]">clnCertCheckerUpdate</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[0]">csAesInit</a> from ciphersuite.o(.text) referenced 4 times from ciphersuite.o(.data)
 <LI><a href="#[8]">csArc4Init</a> from ciphersuite.o(.text) referenced 4 times from ciphersuite.o(.data)
 <LI><a href="#[5]">csDes3Init</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[a]">csMd5GenerateMac</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[b]">csMd5VerifyMac</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[e]">csNullDecrypt</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[d]">csNullEncrypt</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[f]">csNullGenerateMac</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[c]">csNullInit</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[10]">csNullVerifyMac</a> from ciphersuite.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[3]">csShaGenerateMac</a> from ciphersuite.o(.text) referenced 8 times from ciphersuite.o(.data)
 <LI><a href="#[4]">csShaVerifyMac</a> from ciphersuite.o(.text) referenced 8 times from ciphersuite.o(.data)
 <LI><a href="#[5c]">fputc</a> from start.o(.text) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[5c]">fputc</a> from start.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[57]">main</a> from start.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[2]">psAesDecrypt</a> from aes.o(.text) referenced 4 times from ciphersuite.o(.data)
 <LI><a href="#[1]">psAesEncrypt</a> from aes.o(.text) referenced 4 times from ciphersuite.o(.data)
 <LI><a href="#[9]">psArc4</a> from arc4.o(.text) referenced 8 times from ciphersuite.o(.data)
 <LI><a href="#[7]">psDes3Decrypt</a> from des3.o(.text) referenced 2 times from ciphersuite.o(.data)
 <LI><a href="#[6]">psDes3Encrypt</a> from des3.o(.text) referenced 2 times from ciphersuite.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[176]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[177]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[5a]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>mainSSLTest</STRONG> (Thumb, 2364 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432<LI>Call Chain = mainSSLTest &rArr; exchangeAppData &rArr; matrixSslProcessedData &rArr; matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslClose
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslAddRehandshakeCredits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHandshake
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeReHandshake
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedHandshake
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServerInitiatedReHandshake
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedReHandshake
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServerInitiatedResumedReHandshake
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeUpgradeCertCbackReHandshake
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeUpgradeKeysReHandshake
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeChangeCipherReHandshake
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSessionAndConnection
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>USART_Configuration</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_Configuration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>RCC_Configuration</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = main &rArr; mainSSLTest &rArr; exchangeAppData &rArr; matrixSslProcessedData &rArr; matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[5c]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0fprintf$8)
<LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[178]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>psHmacMd5Final</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
</UL>

<P><STRONG><a name="[a7]"></a>psHmacMd5Update</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psHmacMd5Update &rArr; psMd5Update &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
</UL>

<P><STRONG><a name="[a8]"></a>psHmacMd5Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psHmacMd5Init &rArr; psMd5Update &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
</UL>

<P><STRONG><a name="[a9]"></a>psHmacMd5</STRONG> (Thumb, 104 bytes, Stack size 288 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = psHmacMd5 &rArr; psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
</UL>

<P><STRONG><a name="[aa]"></a>psHmacSha1Final</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
</UL>

<P><STRONG><a name="[ae]"></a>psHmacSha1Update</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = psHmacSha1Update &rArr; psSha1Update &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
</UL>

<P><STRONG><a name="[af]"></a>psHmacSha1Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = psHmacSha1Init &rArr; psSha1Update &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
</UL>

<P><STRONG><a name="[b0]"></a>psHmacSha1</STRONG> (Thumb, 104 bytes, Stack size 288 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
</UL>

<P><STRONG><a name="[a4]"></a>psMd5Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psMd5Init &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
</UL>

<P><STRONG><a name="[a5]"></a>psMd5Update</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = psMd5Update &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_compress
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
</UL>

<P><STRONG><a name="[a3]"></a>psMd5Final</STRONG> (Thumb, 492 bytes, Stack size 80 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_compress
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
</UL>

<P><STRONG><a name="[ac]"></a>psSha1Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psSha1Init &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
</UL>

<P><STRONG><a name="[ad]"></a>psSha1Update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = psSha1Update &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_compress
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
</UL>

<P><STRONG><a name="[ab]"></a>psSha1Final</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_compress
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
</UL>

<P><STRONG><a name="[b5]"></a>getAsnLength</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValidity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>

<P><STRONG><a name="[b4]"></a>getAsnBig</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getAsnBig &rArr; pstm_read_unsigned_bin &rArr; pstm_mul_2d &rArr; pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_for_read_unsigned_bin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
</UL>

<P><STRONG><a name="[b9]"></a>getAsnSequence</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getAsnSequence &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
</UL>

<P><STRONG><a name="[ba]"></a>getAsnSet</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getAsnSet &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
</UL>

<P><STRONG><a name="[bb]"></a>getAsnInteger</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getAsnInteger &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[bc]"></a>getAsnAlgorithmIdentifier</STRONG> (Thumb, 252 bytes, Stack size 44 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = getAsnAlgorithmIdentifier &rArr; getAsnSequence &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
</UL>

<P><STRONG><a name="[bd]"></a>getAsnRsaPubKey</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, asn1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = getAsnRsaPubKey &rArr; getAsnBig &rArr; pstm_read_unsigned_bin &rArr; pstm_mul_2d &rArr; pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_unsigned_bin_size
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[bf]"></a>psX509GetSignature</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = psX509GetSignature &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[c5]"></a>psX509GetDNAttributes</STRONG> (Thumb, 752 bytes, Stack size 160 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = psX509GetDNAttributes &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[ca]"></a>psX509ParseCert</STRONG> (Thumb, 906 bytes, Stack size 184 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = psX509ParseCert &rArr; psX509GetDNAttributes &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitVersion
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValidity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[cb]"></a>psX509FreeDNStruct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = psX509FreeDNStruct &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[cc]"></a>psX509FreeCert</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = psX509FreeCert &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[cf]"></a>psX509AuthenticateCert</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = psX509AuthenticateCert &rArr; psRsaDecryptPub &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
</UL>

<P><STRONG><a name="[d1]"></a>pstm_init_size</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pstm_init_size &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_copy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub_d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_for_read_unsigned_bin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[d2]"></a>pstm_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pstm_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
</UL>

<P><STRONG><a name="[d3]"></a>pstm_grow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_2expt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_lshd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_add
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
</UL>

<P><STRONG><a name="[d5]"></a>pstm_copy</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod_2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
</UL>

<P><STRONG><a name="[db]"></a>pstm_clamp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pstm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_rshd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod_2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_add
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
</UL>

<P><STRONG><a name="[b8]"></a>pstm_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_to_unsigned_bin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub_d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear_multi
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[d6]"></a>pstm_clear_multi</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pstm_clear_multi &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[dc]"></a>pstm_zero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_2expt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_rshd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod_2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
</UL>

<P><STRONG><a name="[d8]"></a>pstm_cmp_mag</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pstm_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp
</UL>

<P><STRONG><a name="[d7]"></a>pstm_cmp</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pstm_cmp &rArr; pstm_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[b6]"></a>pstm_init_for_read_unsigned_bin</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pstm_init_for_read_unsigned_bin &rArr; pstm_init_size &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[d9]"></a>pstm_lshd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
</UL>

<P><STRONG><a name="[b7]"></a>pstm_read_unsigned_bin</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pstm_read_unsigned_bin &rArr; pstm_mul_2d &rArr; pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[dd]"></a>pstm_count_bits</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pstm_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_unsigned_bin_size
</UL>

<P><STRONG><a name="[be]"></a>pstm_unsigned_bin_size</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstm_unsigned_bin_size &rArr; pstm_count_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[de]"></a>pstm_set</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstm_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub_d
</UL>

<P><STRONG><a name="[df]"></a>pstm_rshd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pstm_rshd
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
</UL>

<P><STRONG><a name="[e0]"></a>pstm_2expt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pstm_2expt &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
</UL>

<P><STRONG><a name="[e1]"></a>pstm_mul_2</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pstm_mul_2 &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
</UL>

<P><STRONG><a name="[e2]"></a>s_pstm_sub</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = s_pstm_sub &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
</UL>

<P><STRONG><a name="[e4]"></a>pstm_sub</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pstm_sub &rArr; s_pstm_sub &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub_d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[e5]"></a>pstm_sub_d</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, pstm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>

<P><STRONG><a name="[f7]"></a>pstm_montgomery_setup</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pstm_montgomery_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
</UL>

<P><STRONG><a name="[e6]"></a>pstm_montgomery_calc_normalization</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pstm_montgomery_calc_normalization &rArr; s_pstm_sub &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_2expt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_count_bits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
</UL>

<P><STRONG><a name="[e8]"></a>pstm_mul_d</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pstm_mul_d &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
</UL>

<P><STRONG><a name="[e9]"></a>pstm_div_2d</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_rshd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod_2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_to_unsigned_bin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
</UL>

<P><STRONG><a name="[ea]"></a>pstm_div_2</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pstm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>

<P><STRONG><a name="[eb]"></a>pstm_init_copy</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pstm_init_copy &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_to_unsigned_bin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
</UL>

<P><STRONG><a name="[ec]"></a>pstm_add</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pstm_add &rArr; s_pstm_sub &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[ed]"></a>pstm_div</STRONG> (Thumb, 1024 bytes, Stack size 136 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_d
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_rshd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_count_bits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_lshd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
</UL>

<P><STRONG><a name="[f0]"></a>pstm_mod</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exch
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
</UL>

<P><STRONG><a name="[f2]"></a>pstm_mul_comba</STRONG> (Thumb, 438 bytes, Stack size 104 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pstm_mul_comba &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[f3]"></a>pstm_mulmod</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[f4]"></a>pstm_montgomery_reduce</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pstm_montgomery_reduce &rArr; s_pstm_sub &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
</UL>

<P><STRONG><a name="[f5]"></a>pstm_sqr_comba</STRONG> (Thumb, 632 bytes, Stack size 136 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = pstm_sqr_comba &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
</UL>

<P><STRONG><a name="[f6]"></a>pstm_exptmod</STRONG> (Thumb, 1056 bytes, Stack size 480 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_calc_normalization
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_setup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_count_bits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp_mag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[f8]"></a>pstm_to_unsigned_bin</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pstm_to_unsigned_bin &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_copy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_reverse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[18b]"></a>pstm_cmp_d</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pstm.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>psInitPrng</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, prng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = psInitPrng &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetEntropy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowReseed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpen
</UL>

<P><STRONG><a name="[101]"></a>psGetPrng</STRONG> (Thumb, 48 bytes, Stack size 608 bytes, prng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
</UL>

<P><STRONG><a name="[fc]"></a>psYarrowStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psYarrowStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowImport
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
</UL>

<P><STRONG><a name="[fd]"></a>psYarrowAddEntropy</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowImport
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
</UL>

<P><STRONG><a name="[fe]"></a>psYarrowReseed</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = psYarrowReseed &rArr; psAesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowImport
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
</UL>

<P><STRONG><a name="[100]"></a>psYarrowRead</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, yarrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = psYarrowRead &rArr; psAesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncryptBlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowExport
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
</UL>

<P><STRONG><a name="[18c]"></a>psYarrowDone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, yarrow.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>psYarrowExport</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, yarrow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowRead
</UL>

<P><STRONG><a name="[105]"></a>psYarrowImport</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, yarrow.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowReseed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
</UL>

<P><STRONG><a name="[106]"></a>pkcs1Pad</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pkcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = pkcs1Pad &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
</UL>

<P><STRONG><a name="[112]"></a>pkcs1Unpad</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, pkcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pkcs1Unpad
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
</UL>

<P><STRONG><a name="[107]"></a>pkcs1ParsePrivBin</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, pkcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pkcs1ParsePrivBin &rArr; getAsnBig &rArr; pstm_read_unsigned_bin &rArr; pstm_mul_2d &rArr; pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_unsigned_bin_size
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[10a]"></a>pkcs5pbkdf2</STRONG> (Thumb, 262 bytes, Stack size 248 bytes, pkcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
</UL>

<P><STRONG><a name="[10b]"></a>pkcs8ParsePrivBin</STRONG> (Thumb, 842 bytes, Stack size 912 bytes, pkcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Decrypt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[10d]"></a>pkcs5pbkdf1</STRONG> (Thumb, 164 bytes, Stack size 144 bytes, pkcs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[108]"></a>psNewPubKey</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pubkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = psNewPubKey &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
</UL>

<P><STRONG><a name="[109]"></a>psFreePubKey</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pubkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psFreePubKey &rArr; psRsaFreeKey &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[10e]"></a>psRsaFreeKey</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psRsaFreeKey &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
</UL>

<P><STRONG><a name="[10f]"></a>psRsaCrypt</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_to_unsigned_bin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mulmod
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear_multi
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_unsigned_bin_size
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_for_read_unsigned_bin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
</UL>

<P><STRONG><a name="[110]"></a>psRsaEncryptPub</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = psRsaEncryptPub &rArr; pkcs1Pad &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
</UL>

<P><STRONG><a name="[111]"></a>psRsaDecryptPriv</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = psRsaDecryptPriv &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
</UL>

<P><STRONG><a name="[d0]"></a>psRsaDecryptPub</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = psRsaDecryptPub &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
</UL>

<P><STRONG><a name="[102]"></a>psAesInitKey</STRONG> (Thumb, 726 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mix2
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_mix
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowReseed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
</UL>

<P><STRONG><a name="[115]"></a>psAesInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = psAesInit &rArr; psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesInit
</UL>

<P><STRONG><a name="[103]"></a>psAesEncryptBlock</STRONG> (Thumb, 1170 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = psAesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowReseed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowRead
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
</UL>

<P><STRONG><a name="[1]"></a>psAesEncrypt</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = psAesEncrypt &rArr; psAesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncryptBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[116]"></a>psAesDecryptBlock</STRONG> (Thumb, 1180 bytes, Stack size 60 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = psAesDecryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
</UL>

<P><STRONG><a name="[2]"></a>psAesDecrypt</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = psAesDecrypt &rArr; psAesDecryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecryptBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>psArc4Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = psArc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Init
</UL>

<P><STRONG><a name="[9]"></a>psArc4</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psArc4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>psDes3InitKey</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = psDes3InitKey &rArr; deskey &rArr; cookey &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Init
</UL>

<P><STRONG><a name="[10c]"></a>psDes3Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = psDes3Init &rArr; psDes3InitKey &rArr; deskey &rArr; cookey &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3InitKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csDes3Init
</UL>

<P><STRONG><a name="[11a]"></a>psDes3EncryptBlock</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = psDes3EncryptBlock &rArr; desfunc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Encrypt
</UL>

<P><STRONG><a name="[6]"></a>psDes3Encrypt</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = psDes3Encrypt &rArr; psDes3EncryptBlock &rArr; desfunc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3EncryptBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>psDes3DecryptBlock</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = psDes3DecryptBlock &rArr; desfunc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Decrypt
</UL>

<P><STRONG><a name="[7]"></a>psDes3Decrypt</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = psDes3Decrypt &rArr; psDes3DecryptBlock &rArr; desfunc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3DecryptBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[18d]"></a>SslTimerIntHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, noos.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>NoOSTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
</UL>

<P><STRONG><a name="[18f]"></a>sslSetHardwareTimer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>sslOpenOsdep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, noos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeedRandom
</UL>

<P><STRONG><a name="[190]"></a>sslCloseOsdep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, noos.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>sslGetEntropy</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sslGetEntropy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRandomData
</UL>

<P><STRONG><a name="[85]"></a>_psTrace</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _psTrace &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[84]"></a>_psTraceStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _psTraceStr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[65]"></a>psBreak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_compress
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_compress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csDes3Init
</UL>

<P><STRONG><a name="[120]"></a>psGetTime</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = psGetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoOSTime
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
</UL>

<P><STRONG><a name="[146]"></a>psDiffMsecs</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psDiffMsecs
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
</UL>

<P><STRONG><a name="[144]"></a>psCompareTime</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, noos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psCompareTime
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
</UL>

<P><STRONG><a name="[130]"></a>psCoreOpen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpen
</UL>

<P><STRONG><a name="[132]"></a>psCoreClose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslClose
</UL>

<P><STRONG><a name="[128]"></a>csRsaEncryptPub</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = csRsaEncryptPub &rArr; psRsaEncryptPub &rArr; pkcs1Pad &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
</UL>

<P><STRONG><a name="[129]"></a>csRsaDecryptPub</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ciphersuite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[191]"></a>csRsaEncryptPriv</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ciphersuite.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>csRsaDecryptPriv</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = csRsaDecryptPriv &rArr; psRsaDecryptPriv &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[192]"></a>matrixSslSetCipherSuiteEnabledStatus</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, ciphersuite.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>sslGetCipherSpec</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sslGetCipherSpec &rArr; haveKeyMaterial
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haveKeyMaterial
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
</UL>

<P><STRONG><a name="[12e]"></a>sslGetCipherSpecList</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sslGetCipherSpecList &rArr; haveKeyMaterial
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haveKeyMaterial
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[12f]"></a>sslGetCipherSpecListLen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sslGetCipherSpecListLen &rArr; haveKeyMaterial
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haveKeyMaterial
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[82]"></a>matrixSslOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = matrixSslOpen &rArr; psInitPrng &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psInitPrng
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psCoreOpen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[131]"></a>matrixSslGetPrngData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[88]"></a>matrixSslClose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = matrixSslClose
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psCoreClose
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[7c]"></a>matrixSslNewKeys</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = matrixSslNewKeys &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
</UL>

<P><STRONG><a name="[7d]"></a>matrixSslLoadRsaKeysMem</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = matrixSslLoadRsaKeysMem &rArr; matrixSslLoadKeyMaterialMem &rArr; pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
</UL>

<P><STRONG><a name="[61]"></a>matrixSslDeleteKeys</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = matrixSslDeleteKeys &rArr; psX509FreeCert &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSessionAndConnection
</UL>

<P><STRONG><a name="[135]"></a>sslActivateWriteCipher</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sslActivateWriteCipher &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
</UL>

<P><STRONG><a name="[136]"></a>sslActivateReadCipher</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sslActivateReadCipher &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
</UL>

<P><STRONG><a name="[137]"></a>matrixSslNewSession</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = matrixSslNewSession &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
</UL>

<P><STRONG><a name="[138]"></a>matrixUpdateSession</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixUpdateSession &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[60]"></a>matrixSslDeleteSession</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = matrixSslDeleteSession &rArr; psX509FreeCert &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedHandshake
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSessionAndConnection
</UL>

<P><STRONG><a name="[139]"></a>matrixClearSession</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixClearSession
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
</UL>

<P><STRONG><a name="[13a]"></a>matrixSslSetSessionOption</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrixSslSetSessionOption &rArr; matrixClearSession
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>

<P><STRONG><a name="[193]"></a>matrixSslGetAnonStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixssl.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>matrixSslHandshakeIsComplete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, matrixssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[14a]"></a>matrixSslSetCertValidator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, matrixssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>

<P><STRONG><a name="[13b]"></a>sslInitHSHash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sslInitHSHash &rArr; psSha1Init &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[13c]"></a>sslUpdateHSHash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sslUpdateHSHash &rArr; psSha1Update &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[13d]"></a>sslSnapshotHSHash</STRONG> (Thumb, 94 bytes, Stack size 328 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGenerateFinishedHash
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[140]"></a>sslCreateKeys</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = sslCreateKeys &rArr; tlsDeriveKeys &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[143]"></a>matrixRegisterSession</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = matrixRegisterSession &rArr; psCompareTime
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psCompareTime
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
</UL>

<P><STRONG><a name="[145]"></a>matrixResumeSession</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = matrixResumeSession &rArr; psDiffMsecs
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDiffMsecs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[147]"></a>matrixSslGetSessionId</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixSslGetSessionId &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[148]"></a>sslResetContext</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sslResetContext &rArr; matrixClearSession
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
</UL>

<P><STRONG><a name="[149]"></a>matrixValidateCerts</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = matrixValidateCerts &rArr; psX509AuthenticateCert &rArr; psRsaDecryptPub &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[156]"></a>matrixUserCertValidator</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = matrixUserCertValidator
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
</UL>

<P><STRONG><a name="[78]"></a>matrixSslNewClientSession</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = matrixSslNewClientSession &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetCertValidator
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedHandshake
</UL>

<P><STRONG><a name="[79]"></a>matrixSslNewServerSession</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = matrixSslNewServerSession &rArr; matrixSslNewSession &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedHandshake
</UL>

<P><STRONG><a name="[69]"></a>matrixSslGetReadbuf</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrixSslGetReadbuf &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[68]"></a>matrixSslGetOutdata</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matrixSslGetOutdata &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[63]"></a>matrixSslGetWritebuf</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = matrixSslGetWritebuf &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetEncodedSize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
</UL>

<P><STRONG><a name="[67]"></a>matrixSslEncodeWritebuf</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = matrixSslEncodeWritebuf &rArr; matrixSslEncode &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[14e]"></a>matrixSslEncodeToOutdata</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, matrixsslapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[6c]"></a>matrixSslReceivedData</STRONG> (Thumb, 1780 bytes, Stack size 112 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslHandshakeIsComplete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[6d]"></a>matrixSslProcessedData</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288<LI>Call Chain = matrixSslProcessedData &rArr; matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[152]"></a>matrixSslEncodeClosureAlert</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, matrixsslapi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeClosureAlert
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[71]"></a>matrixSslEncodeRehandshake</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetCertValidator
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeReHandshake
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServerInitiatedReHandshake
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeResumedReHandshake
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServerInitiatedResumedReHandshake
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeUpgradeCertCbackReHandshake
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeUpgradeKeysReHandshake
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeChangeCipherReHandshake
</UL>

<P><STRONG><a name="[86]"></a>matrixSslAddRehandshakeCredits</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, matrixsslapi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[6b]"></a>matrixSslSentData</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = matrixSslSentData &rArr; revertToDefaultBufsize &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslHandshakeIsComplete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[151]"></a>matrixSslDecode</STRONG> (Thumb, 1796 bytes, Stack size 96 bytes, ssldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
</UL>

<P><STRONG><a name="[159]"></a>sslWritePad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sslWritePad
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>

<P><STRONG><a name="[15c]"></a>psWriteHandshakeHeader</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psWriteHandshakeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>

<P><STRONG><a name="[15b]"></a>psWriteRecordInfo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psWriteRecordInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
</UL>

<P><STRONG><a name="[14d]"></a>matrixSslEncode</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = matrixSslEncode &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
</UL>

<P><STRONG><a name="[14c]"></a>matrixSslGetEncodedSize</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, sslencode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
</UL>

<P><STRONG><a name="[157]"></a>sslEncodeResponse</STRONG> (Thumb, 1094 bytes, Stack size 48 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = sslEncodeResponse &rArr; writeFinished &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secureWriteAdditions
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[153]"></a>sslEncodeClosureAlert</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sslencode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
</UL>

<P><STRONG><a name="[154]"></a>matrixSslEncodeHelloRequest</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = matrixSslEncodeHelloRequest &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>

<P><STRONG><a name="[14b]"></a>matrixSslEncodeClientHello</STRONG> (Thumb, 1032 bytes, Stack size 112 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecListLen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[142]"></a>sslDeriveKeys</STRONG> (Thumb, 192 bytes, Stack size 248 bytes, sslv3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = sslDeriveKeys &rArr; createKeyBlock &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
</UL>

<P><STRONG><a name="[13f]"></a>sslGenerateFinishedHash</STRONG> (Thumb, 222 bytes, Stack size 240 bytes, sslv3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = sslGenerateFinishedHash &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
</UL>

<P><STRONG><a name="[125]"></a>ssl3HMACSha1</STRONG> (Thumb, 174 bytes, Stack size 152 bytes, sslv3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ssl3HMACSha1 &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
</UL>

<P><STRONG><a name="[127]"></a>ssl3HMACMd5</STRONG> (Thumb, 196 bytes, Stack size 144 bytes, sslv3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl3HMACMd5 &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5GenerateMac
</UL>

<P><STRONG><a name="[141]"></a>tlsDeriveKeys</STRONG> (Thumb, 404 bytes, Stack size 104 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = tlsDeriveKeys &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
</UL>

<P><STRONG><a name="[124]"></a>tlsHMACSha1</STRONG> (Thumb, 306 bytes, Stack size 216 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = tlsHMACSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaGenerateMac
</UL>

<P><STRONG><a name="[126]"></a>tlsHMACMd5</STRONG> (Thumb, 162 bytes, Stack size 216 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tlsHMACMd5 &rArr; psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5GenerateMac
</UL>

<P><STRONG><a name="[13e]"></a>tlsGenerateFinishedHash</STRONG> (Thumb, 112 bytes, Stack size 96 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
</UL>

<P><STRONG><a name="[169]"></a>matrixSslNewHelloExtension</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16a]"></a>matrixSslDeleteHelloExtension</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[16b]"></a>matrixSslLoadHelloExtension</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[194]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_sub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_pstm_add
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[195]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValidity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateReadCipher
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csNullEncrypt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHandshake
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetSessionId
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csNullDecrypt
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowRead
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSetSessionOption
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Decrypt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowStart
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslOpen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslClose
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewHelloExtension
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createKeyBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixClearSession
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csAesInit
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csDes3Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csArc4Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Encrypt
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesDecrypt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesEncrypt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c6]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
</UL>

<P><STRONG><a name="[ce]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csMd5VerifyMac
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csShaVerifyMac
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[95]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[91]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[16e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9b]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9d]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[96]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[92]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[98]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[97]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[99]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9c]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[93]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8a]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16f]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19f]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[64]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs5pbkdf2
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_compress
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_compress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeToOutdata
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csDes3Init
</UL>

<P><STRONG><a name="[171]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTraceStr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psTrace
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangeAppData
</UL>

<P><STRONG><a name="[87]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clear
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteHelloExtension
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[83]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_exptmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sqr_comba
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_montgomery_reduce
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mul_comba
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_init_size
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getValidity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewKeys
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadHelloExtension
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewHelloExtension
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseSSLHandshake
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewSession
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d4]"></a>realloc</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClosureAlert
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;revertToDefaultBufsize
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>freeSessionAndConnection</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = freeSessionAndConnection &rArr; matrixSslDeleteSession &rArr; psX509FreeCert &rArr; pstm_clear &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[62]"></a>exchangeAppData</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = exchangeAppData &rArr; matrixSslProcessedData &rArr; matrixSslReceivedData &rArr; matrixSslDecode &rArr; parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetWritebuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeWritebuf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[6f]"></a>performHandshake</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336 + In Cycle
<LI>Call Chain = performHandshake &rArr;  performHandshake (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetReadbuf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetOutdata
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performHandshake
</UL>

<P><STRONG><a name="[70]"></a>initializeChangeCipherReHandshake</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeChangeCipherReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[72]"></a>initializeUpgradeKeysReHandshake</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeUpgradeKeysReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[58]"></a>clnCertCheckerUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>initializeUpgradeCertCbackReHandshake</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeUpgradeCertCbackReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[74]"></a>initializeServerInitiatedResumedReHandshake</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeServerInitiatedResumedReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[75]"></a>initializeResumedReHandshake</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeResumedReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[76]"></a>initializeServerInitiatedReHandshake</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeServerInitiatedReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[59]"></a>clnCertChecker</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>initializeResumedHandshake</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = initializeResumedHandshake &rArr; matrixSslNewClientSession &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDeleteSession
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[7a]"></a>initializeReHandshake</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = initializeReHandshake &rArr; matrixSslEncodeRehandshake &rArr; matrixSslEncodeClientHello &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeRehandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[7b]"></a>initializeClient</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = initializeClient &rArr; matrixSslLoadRsaKeysMem &rArr; matrixSslLoadKeyMaterialMem &rArr; pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewKeys
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewClientSession
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadRsaKeysMem
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHandshake
</UL>

<P><STRONG><a name="[7e]"></a>initializeServer</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = initializeServer &rArr; matrixSslLoadRsaKeysMem &rArr; matrixSslLoadKeyMaterialMem &rArr; pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewServerSession
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslNewKeys
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadRsaKeysMem
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeHandshake
</UL>

<P><STRONG><a name="[7f]"></a>initializeHandshake</STRONG> (Thumb, 68 bytes, Stack size 104 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = initializeHandshake &rArr; initializeServer &rArr; matrixSslLoadRsaKeysMem &rArr; matrixSslLoadKeyMaterialMem &rArr; pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeServer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeClient
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainSSLTest
</UL>

<P><STRONG><a name="[b1]"></a>md5_compress</STRONG> (Thumb, 474 bytes, Stack size 104 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
</UL>

<P><STRONG><a name="[b3]"></a>sha1_compress</STRONG> (Thumb, 514 bytes, Stack size 360 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
</UL>

<P><STRONG><a name="[c0]"></a>parseGeneralNames</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parseGeneralNames &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[c3]"></a>lookupExt</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lookupExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[c2]"></a>getExplicitExtensions</STRONG> (Thumb, 802 bytes, Stack size 192 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = getExplicitExtensions &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupExt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[c4]"></a>getImplicitBitString</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getImplicitBitString &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[c7]"></a>getValidity</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getValidity &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[c8]"></a>getSerialNum</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getSerialNum &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[c9]"></a>getExplicitVersion</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getExplicitVersion &rArr; getAsnInteger &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[cd]"></a>x509ConfirmSignature</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = x509ConfirmSignature &rArr; getAsnAlgorithmIdentifier &rArr; getAsnSequence &rArr; getAsnLength
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>

<P><STRONG><a name="[da]"></a>pstm_mul_2d</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pstm_mul_2d &rArr; pstm_lshd &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_lshd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_read_unsigned_bin
</UL>

<P><STRONG><a name="[e3]"></a>s_pstm_add</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = s_pstm_add &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_grow
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_add
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_sub
</UL>

<P><STRONG><a name="[e7]"></a>pstm_mod_2d</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_zero
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_clamp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_div_2d
</UL>

<P><STRONG><a name="[f1]"></a>pstm_exch</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstm_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_mod
</UL>

<P><STRONG><a name="[f9]"></a>pstm_reverse</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, pstm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstm_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_to_unsigned_bin
</UL>

<P><STRONG><a name="[ff]"></a>readRandomData</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, prng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetEntropy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowReseed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowRead
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psYarrowAddEntropy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
</UL>

<P><STRONG><a name="[113]"></a>setup_mix</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
</UL>

<P><STRONG><a name="[114]"></a>setup_mix2</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setup_mix2
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInitKey
</UL>

<P><STRONG><a name="[117]"></a>cookey</STRONG> (Thumb, 150 bytes, Stack size 152 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cookey &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[118]"></a>deskey</STRONG> (Thumb, 276 bytes, Stack size 280 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = deskey &rArr; cookey &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3InitKey
</UL>

<P><STRONG><a name="[11b]"></a>desfunc</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = desfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3DecryptBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3EncryptBlock
</UL>

<P><STRONG><a name="[11e]"></a>SeedRandom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, noos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslOpenOsdep
</UL>

<P><STRONG><a name="[11f]"></a>GetRandom</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetEntropy
</UL>

<P><STRONG><a name="[c]"></a>csNullInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ciphersuite.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>csArc4Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = csArc4Init &rArr; psArc4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psArc4Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>csDes3Init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = csDes3Init &rArr; psDes3Init &rArr; psDes3InitKey &rArr; deskey &rArr; cookey &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>csAesInit</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = csAesInit &rArr; psAesInit &rArr; psAesInitKey &rArr; setup_mix2
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psAesInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>csNullEncrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csNullEncrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>csNullDecrypt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = csNullDecrypt &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>csNullGenerateMac</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = csNullGenerateMac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>csNullVerifyMac</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = csNullVerifyMac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>csShaGenerateMac</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = csShaGenerateMac &rArr; tlsHMACSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>csShaVerifyMac</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = csShaVerifyMac &rArr; tlsHMACSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACSha1
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACSha1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>csMd5GenerateMac</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = csMd5GenerateMac &rArr; tlsHMACMd5 &rArr; psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>csMd5VerifyMac</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = csMd5VerifyMac &rArr; tlsHMACMd5 &rArr; psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsHMACMd5
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3HMACMd5
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ciphersuite.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>haveCorrectKeyAlg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ciphersuite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haveKeyMaterial
</UL>

<P><STRONG><a name="[12b]"></a>haveKeyMaterial</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ciphersuite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = haveKeyMaterial
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haveCorrectKeyAlg
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecListLen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpecList
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
</UL>

<P><STRONG><a name="[133]"></a>verifyReadKeys</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = verifyReadKeys &rArr; psX509AuthenticateCert &rArr; psRsaDecryptPub &rArr; psRsaCrypt &rArr; pstm_exptmod &rArr; pstm_mulmod &rArr; pstm_mod &rArr; pstm_div &rArr; pstm_div_2d &rArr; pstm_mod_2d &rArr; pstm_copy &rArr; pstm_grow &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstm_cmp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadKeyMaterialMem
</UL>

<P><STRONG><a name="[134]"></a>matrixSslLoadKeyMaterialMem</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, matrixssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = matrixSslLoadKeyMaterialMem &rArr; pkcs8ParsePrivBin &rArr; pkcs5pbkdf2 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivBin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1ParsePrivBin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyReadKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslLoadRsaKeysMem
</UL>

<P><STRONG><a name="[14f]"></a>revertToDefaultBufsize</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, matrixsslapi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = revertToDefaultBufsize &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslSentData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslReceivedData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslProcessedData
</UL>

<P><STRONG><a name="[155]"></a>parseSSLHandshake</STRONG> (Thumb, 4566 bytes, Stack size 160 bytes, ssldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = parseSSLHandshake &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUserCertValidator
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixValidateCerts
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslResetContext
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixResumeSession
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslInitHSHash
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixUpdateSession
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslGetCipherSpec
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaDecryptPriv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslDecode
</UL>

<P><STRONG><a name="[158]"></a>encryptRecord</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = encryptRecord &rArr; sslUpdateHSHash &rArr; psSha1Update &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslWritePad
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslUpdateHSHash
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
</UL>

<P><STRONG><a name="[15a]"></a>writeRecordHeader</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psWriteRecordInfo
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psWriteHandshakeHeader
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHelloDone
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeServerHello
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeAlert
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCertificate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeClientKeyExchange
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChangeCipherSpec
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFinished
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeHelloRequest
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncodeClientHello
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslEncode
</UL>

<P><STRONG><a name="[15d]"></a>writeFinished</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = writeFinished &rArr; sslSnapshotHSHash &rArr; tlsGenerateFinishedHash &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslSnapshotHSHash
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[15e]"></a>writeChangeCipherSpec</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = writeChangeCipherSpec &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslActivateWriteCipher
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[15f]"></a>writeClientKeyExchange</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = writeClientKeyExchange &rArr; sslCreateKeys &rArr; tlsDeriveKeys &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csRsaEncryptPub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[160]"></a>writeCertificate</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = writeCertificate &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[161]"></a>writeAlert</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = writeAlert &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeClosureAlert
</UL>

<P><STRONG><a name="[164]"></a>secureWriteAdditions</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = secureWriteAdditions
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[162]"></a>writeServerHello</STRONG> (Thumb, 728 bytes, Stack size 72 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = writeServerHello &rArr; sslCreateKeys &rArr; tlsDeriveKeys &rArr; prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixRegisterSession
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslCreateKeys
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrixSslGetPrngData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetTime
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[163]"></a>writeServerHelloDone</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, sslencode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = writeServerHelloDone &rArr; writeRecordHeader &rArr; matrixSslGetPrngData &rArr; psGetPrng &rArr; readRandomData &rArr; psYarrowAddEntropy &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRecordHeader
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslEncodeResponse
</UL>

<P><STRONG><a name="[165]"></a>createKeyBlock</STRONG> (Thumb, 412 bytes, Stack size 288 bytes, sslv3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = createKeyBlock &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psSha1Final
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psMd5Final
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sslDeriveKeys
</UL>

<P><STRONG><a name="[166]"></a>pSha1</STRONG> (Thumb, 214 bytes, Stack size 280 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
</UL>

<P><STRONG><a name="[167]"></a>pMd5</STRONG> (Thumb, 210 bytes, Stack size 264 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = pMd5 &rArr; psHmacMd5 &rArr; psHmacMd5Final &rArr; psMd5Final &rArr; md5_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf
</UL>

<P><STRONG><a name="[168]"></a>prf</STRONG> (Thumb, 132 bytes, Stack size 424 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = prf &rArr; pSha1 &rArr; psHmacSha1 &rArr; psHmacSha1Final &rArr; psSha1Final &rArr; sha1_compress &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psBreak
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pMd5
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSha1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateFinishedHash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDeriveKeys
</UL>

<P><STRONG><a name="[170]"></a>_printf_core</STRONG> (Thumb, 1010 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[174]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[173]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>internal_alloc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
